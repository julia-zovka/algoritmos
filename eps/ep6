#include <vector>
#include <tuple>
#include <queue>
#include <iostream>
#include <climits>
#include <algorithm>
using namespace std;
 
#define int long long int
 
 
void set_edgee(vector<vector<pair<int, int>>> &grafo, int a, int b , int w){
    grafo[a].push_back({b,w});
    grafo[b].push_back({a,w});
}
 
 
void dj(vector<vector<pair<int, int>>> &grafo, vector<int> &distance, vector<int> &mark, vector<int> &pred, int s, int n ){
    priority_queue<tuple<int,int,int> , vector<tuple<int,int,int>> , greater<tuple<int,int,int>>> heap;
    
    heap.push({0,s,s});/////peso pre e atual
    distance[s]=0;
 
    int dist,p,v;
    for(int i=0;i<n;i++){
        do{
            if(heap.empty()){return;}
            tie(dist,p,v)=heap.top();
            heap.pop();
 
        }while(mark[v]==1);
 
        mark[v]=1;
        pred[v]=p;
 
        for(auto [proximo,peso] : grafo[v]){
            if(mark[proximo]!=1 && distance[proximo]>distance[v]+peso){
                distance[proximo]=distance[v]+peso;
                heap.push({distance[proximo], v, proximo});
            }
        }
    }
}
 
 
signed main(){
 
    int n,e, a,b,w,dst;
 
    cin>>n>>e;
    dst=n-1;
 
    vector<vector<pair<int,int>>> grafo(n, vector<pair<int,int>>());/// distancia e no
    vector<int> pred(n,-1);
    vector<int> distance(n,LLONG_MAX);
    vector<int> mark(n,0);
    //vector<vector<vector<int>>> arestas ;
 
    for(int i=0;i<e;i++){
        cin>>a>>b>>w;
        set_edgee(grafo,a-1,b-1,w);///////////setar pra todas menores arestas 
    }
 
 
    dj(grafo,distance,mark, pred,0, n);
 
 
    vector<int> ans;
    if(distance[dst]!=LLONG_MAX){///////// teve caminhou
        int meio=pred[dst];
        ans.push_back(dst+1);
        while(meio!=0 && meio!=-1){
            ans.push_back(meio+1);
            meio=pred[meio];
        }
    
        ans.push_back(meio+1);
        reverse(ans.begin(), ans.end());
        for(int x: ans){
            cout<<x<<" ";
        }
        cout<<endl;
    }
    else{cout<<-1<<endl;}
}
